// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") //
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int        @id @default(autoincrement())
  name      String?
  email     String?    @unique
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  works     Work[]
  profile   Profile?
  role      Role
  bookmarks Bookmark[]
  comments  Comment[]

  @@map(name: "users")
}

//profile
model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

//work
model Work {
  id        Int        @id @default(autoincrement())
  title     String
  summary   String
  // content   String? // might get rid of and have chapter directly as content
  chapters  Chapter[]
  published Boolean    @default(false)
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  Int
  subject   Subject[] //? @relation(fields:[subjectId], references: [id])
  // subjectId Int
  tag       Tag[]
  rating    String
  warning   String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  bookmarks Bookmark[]
  comments  Comment[]
}

//chapter
model Chapter {
  id        String   @id @default(cuid())
  title     String? //?
  summary   String? //?
  content   String?
  published Boolean  @default(false)
  work      Work?    @relation(fields: [workId], references: [id])
  workId    Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

//subject
model Subject {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  works Work[]

  @@unique([name])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  works Work[]

  @@unique([name])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  work      Work     @relation(fields: [workId], references: [id])
  workId    Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  work      Work     @relation(fields: [workId], references: [id])
  workId    Int
  note      String
}